
genericLexer GrammarLexer;

[KeyWord] LEXER : 'genericLexer' ;
[KeyWord] PARSER : 'parser' ;
[String] STRING : '''' ''''; 
[Int] INT;
[KeyWord] DOUBLE : 'Double';
[KeyWord] ALPHAID : 'AlphaId';
[KeyWord] ALPHANUMID : 'AlphaNumId';
[KeyWord] ALPHANUMDASHID : 'AlphaNumDashId';  
[KeyWord] KEYWORD : 'KeyWord';
[KeyWord] SUGAR : 'Sugar';
[KeyWord] RIGHT : 'Right';
[KeyWord] LEFT : 'Left';
[KeyWord] PREFIX : 'Prefix';
[KeyWord] OPERAND : 'Operand';
[KeyWord] STRINGTOKEN : 'String';
[KeyWord] INTTOKEN : 'Int';
[KeyWord] SINGLELINECOMMENT : 'SingleLineComment';
[KeyWord] MULTILINECOMMENT : 'MultiLineComment';
[AlphaNumDashId] ID;
[SingleLineComment] LINECOMMENT : '#';
[MultiLineComment] BLOCKCOMMENT : '/*' '*/';

[Sugar] OR : '|';
[Sugar] START : '@';

parser GrammarParser;

@ root: genericRoot parserRoot ;



# Lexer


genericRoot : LEXER ID ';'  token*;

token :'[' [KEYWORD|SUGAR|SINGLELINECOMMENT] ']' ID ':' STRING ';';

token : '[' [STRINGTOKEN|INTTOKEN|ALPHAID|ALPHANUMID|ALPHANUMDASHID|DOUBLE] ']' ID ';';

token : '[' [STRINGTOKEN|MULTILINECOMMENT] ']' ID ':' STRING STRING ';';



# parser

parserRoot : PARSER ID ';' rule*;

operand : '[' OPERAND ']';

rule  : START? operand? ID ':' clause+ ';';


# expressions

rule : '[' PREFIX INT ']' ID ';';

rule : '[' [RIGHT|LEFT] INT ']' ID ';';



# clauses

item : [ ID | STRING ];

clause : item '*';

clause : item '+';

clause : item '?';

clause : item ;

clause : choiceclause;

clause : group;


# choices

choiceclause : '['  item ( OR item)* ']';

clause : choiceclause '+';

clause : choiceclause '*';

clause : choiceclause '?';

# groups

group : '('  item* ')';

clause : group '+';

clause : group '*';

clause : group '?';






