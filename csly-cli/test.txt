genericLexer MyLexer;

[String] STRING;
[Int] INT;
[AlphaId] ID; # to be derived for every identifier types


[ KeyWord] IF:'if';
[ KeyWord] THEN:'then';
[ KeyWord] ELSE:'else';
[ KeyWord] WHILE:'while';
[ KeyWord] DO:'do';
[ KeyWord] SKIP:'skip';
[ KeyWord] TRUE:'true';
[ KeyWord] FALSE:'false';
[ KeyWord] NOT:'not';
[ KeyWord] AND:'and';
[ KeyWord] OR:'or';
[ KeyWord] PRINT:'print';

 [Sugar] GREATER : '>';

[Sugar] LESSER : '<';

[Sugar] EQUALS : '==';

[Sugar] DIFFERENT : '!=';

[Sugar] CONCAT : '.';

[Sugar] ASSIGN : ':=';

[Sugar] PLUS : '+';
[Sugar] MINUS : '-';
[Sugar] TIMES : '*';
[Sugar] DIVIDE : '/';

[Sugar] LPAREN : '(';
[Sugar] RPAREN : ')';
[Sugar] SEMICOLON : ';';

parser MyParser;

# operations 

[Right 50] LESSER;
[Right 50] GREATER;
[Right 50] EQUALS;
[Right 50]DIFFERENT;

[Right 10] CONCAT;
       
[Right 10] PLUS;
[Left 10] MINUS;
[Right 50] TIMES;
[Left 50]DIVIDE;

[Prefix 100] MINUS;

[Right 10] OR;
[Right 50] AND;
[Prefix 100] NOT;

# operands

[Operand] int : INT;
[Operand] true : TRUE;
[Operand] false : FALSE;
[Operand] string : STRING;
[Operand] id : ID;
[Operand] group : expressionGroup;

# statements

-> statement :  LPAREN statement RPAREN ;

statement : sequence;

sequence : statementPrim additionalStatements*;

additionalStatements : SEMICOLON statementPrim;

statementPrim: IF MyParser_expressions THEN statement ELSE statement;

statementPrim: WHILE MyParser_expressions DO statement;

statementPrim: ID ASSIGN MyParser_expressions;

statementPrim: SKIP;

statementPrim: PRINT MyParser_expressions;

expressionGroup : LPAREN MyParser_expressions RPAREN;
